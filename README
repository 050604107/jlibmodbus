README

The MODBUS protocol implementation in pure java. The goals of the library are:
1 - support of the most popular serial communication libraries(jssc, rxtx, java comm api); 
2 - complete implementation of the modbus protocol v1.1b.

AUTHORS

Vladislav Y. Kochedykov, software engineer, technical expert.

CONTACT

If you have problems, questions or suggestions, please contact me at email address vladislav.kochedykov@gmail.com

WEB SITE

project homepage:
http://jlibmodbus.sourceforge.net

jssc home page:
https://code.google.com/p/java-simple-serial-connector
https://github.com/scream3r/java-simple-serial-connector

rxtx home page:
http://users.frii.com/jarvi/rxtx/index.html

-----------------------------------------------------------------------------------------------------------
----Release version 1.2.2 ---------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------
Since this version the library is destributed under Apache license version 2.0. Also, added support of the java communication api 3.0.
	NEWS
	* IMPORTANT! added support for java communication api 3.0.
	* IMPORTANT! migration to the apache license version 2.0.
	* purgeRx, purgeTx, clear methods have been removed from SerialPort class.
	* "reset" method has been removed from ModbusConnection.
	* fixed potential bug with infinite loop in ModbusMaster.readResponse.
	* added method ModbusConnection.getReadTimeout.
	* prevents a NullPointerException if master is used before it has been opened.
-----------------------------------------------------------------------------------------------------------
----Release version 1.2.1 ---------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------
This version contains some improvements and some bug fixes. Also, the RXTX library is currently supported.
	NEWS:
	* IMPORTANT! the RXTX library is now supported! You should invoke SerialUtils.setSerialPortFactory(new SerialPortFactoryRXTX()); before you'll have created a master or a slave.
	* added checking if jssc library is available
	* fixed potential bug with reading of byte array.
	* avoiding some NullPointerException exceptions.
	* IMPORTANT! fixed bug with flushing of output buffers.
	* modbus rtu master is now able to connect via tcp socket(in case of rs232/rs485 to wifi adapters).
	* added abstraction of concrete serial port implementation.
-----------------------------------------------------------------------------------------------------------
----Release version 1.2 -----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------
This version contains some improvements.
	NEWS:
	* Added extended logging.
	* Auto increment of transaction id is currently supported. see Modbus.setAutoIncrementTransactionId.
	* Refactoring.
-----------------------------------------------------------------------------------------------------------
----Release version 1.1 -----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------
This version contains important fixes. Also, debugging information such as names of variables has been added.
	NEWS:
	* Important! fixed bug with read of starting address.
	* Important! fixed data conversion issues.

-----------------------------------------------------------------------------------------------------------
----Release version 1.0 -----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------
Implemented:

1.  Read Coils(0x1)
2.  Read Discrete Inputs(0x2)
3.  Read Holding Registers(0x3)
4.  Read Input Registers(0x4)
5.  Write Single Coil(0x5)
6.  Write Single Register(0x6)
7.  Read Exception Status(0x7, serial line only)
8.  Diagnostics(0x8, serial line only)
9.  Get Comm Event Counter(0x0B, serial line only)
10. Get Comm Event Log(0x0C, serial line only)
11. Write Multiple Coils(0x0F)
12. Write Multiple Registers(0x10)
13. Report Slave Id(0x11, serial line only)
14. Read File Record(0x14)
15. Write File Record(0x15)
16. Mask Write Register(0x16)
17. Read Write Multiple Registers(0x17)
18. Read Fifo Queue(0x18)
19. Encapsulated Interface Transport(0x2B, Read Device Identification interface, (0x2B / 0x0E))
